// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles_and_permissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AssignPermissionToRoleParams struct {
	RoleID       int32 `json:"role_id"`
	PermissionID int32 `json:"permission_id"`
}

func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.Exec(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreatePermission(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description, is_active)
VALUES ($1, $2, COALESCE($3, TRUE))
RETURNING id, name, description, is_active, created_at, updated_at
`

type CreateRoleParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Column3     interface{} `json:"column_3"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description, arg.Column3)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePermission, id)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT id, name FROM permissions WHERE id = $1
`

func (q *Queries) GetPermissionByID(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionByID, id)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPermissionByName = `-- name: GetPermissionByName :one
SELECT id, name FROM permissions WHERE name = $1
`

func (q *Queries) GetPermissionByName(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionByName, name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, description, is_active, created_at, updated_at FROM roles WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, description, is_active, created_at, updated_at FROM roles WHERE name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPermissionsByRole = `-- name: ListPermissionsByRole :many
SELECT p.id, p.name FROM permissions p
JOIN role_permissions rp ON rp.permission_id = p.id
WHERE rp.role_id = $1
`

func (q *Queries) ListPermissionsByRole(ctx context.Context, roleID int32) ([]Permission, error) {
	rows, err := q.db.Query(ctx, listPermissionsByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPermissionsPaginatedSearch = `-- name: ListPermissionsPaginatedSearch :many
SELECT id,name,count(*) OVER() as total_count
FROM permissions
WHERE
  (LOWER(name) LIKE LOWER($1) OR $1 = '')
ORDER BY
  CASE WHEN $2::bool THEN name END ASC,
  CASE WHEN $3::bool THEN name END DESC,
  id DESC -- Default sort
LIMIT $5 OFFSET $4
`

type ListPermissionsPaginatedSearchParams struct {
	SearchBy        string      `json:"search_by"`
	OrderByNameAsc  pgtype.Bool `json:"order_by_name_asc"`
	OrderByNameDesc pgtype.Bool `json:"order_by_name_desc"`
	Offset          int32       `json:"offset"`
	Limit           int32       `json:"limit"`
}

type ListPermissionsPaginatedSearchRow struct {
	ID         int32  `json:"id"`
	Name       string `json:"name"`
	TotalCount int64  `json:"total_count"`
}

func (q *Queries) ListPermissionsPaginatedSearch(ctx context.Context, arg ListPermissionsPaginatedSearchParams) ([]ListPermissionsPaginatedSearchRow, error) {
	rows, err := q.db.Query(ctx, listPermissionsPaginatedSearch,
		arg.SearchBy,
		arg.OrderByNameAsc,
		arg.OrderByNameDesc,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPermissionsPaginatedSearchRow
	for rows.Next() {
		var i ListPermissionsPaginatedSearchRow
		if err := rows.Scan(&i.ID, &i.Name, &i.TotalCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesPaginatedSearch = `-- name: ListRolesPaginatedSearch :many
SELECT id,name,description,is_active,created_at,updated_at,count(*) OVER() as total_count
FROM roles
WHERE
  (LOWER(name) LIKE LOWER('%' || $1 || '%') OR $1 = '')
ORDER BY
  CASE 
    WHEN $2 = 'name' AND $3 = 'asc' THEN name 
  END ASC,
  CASE 
    WHEN $2 = 'name' AND $3 = 'desc' THEN name 
  END DESC,
  id DESC -- Default sort
LIMIT $5 OFFSET $4
`

type ListRolesPaginatedSearchParams struct {
	SearchBy pgtype.Text `json:"search_by"`
	OrderBy  interface{} `json:"order_by"`
	OrderDir interface{} `json:"order_dir"`
	Offset   int32       `json:"offset"`
	Limit    int32       `json:"limit"`
}

type ListRolesPaginatedSearchRow struct {
	ID          int32            `json:"id"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	IsActive    pgtype.Bool      `json:"is_active"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	TotalCount  int64            `json:"total_count"`
}

func (q *Queries) ListRolesPaginatedSearch(ctx context.Context, arg ListRolesPaginatedSearchParams) ([]ListRolesPaginatedSearchRow, error) {
	rows, err := q.db.Query(ctx, listRolesPaginatedSearch,
		arg.SearchBy,
		arg.OrderBy,
		arg.OrderDir,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRolesPaginatedSearchRow
	for rows.Next() {
		var i ListRolesPaginatedSearchRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
DELETE FROM role_permissions
WHERE role_id = $1 AND permission_id = $2
`

type RemovePermissionFromRoleParams struct {
	RoleID       int32 `json:"role_id"`
	PermissionID int32 `json:"permission_id"`
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.Exec(ctx, removePermissionFromRole, arg.RoleID, arg.PermissionID)
	return err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles SET
  name = COALESCE($1, name),
  description = COALESCE($2, description),
  is_active = COALESCE($3, is_active),
  updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, name, description, is_active, created_at, updated_at
`

type UpdateRoleParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	IsActive    pgtype.Bool `json:"is_active"`
	ID          int32       `json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.ID,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
