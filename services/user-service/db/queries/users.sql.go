// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name ,last_name ,email ,password_hash ,phone_no ,dob ,is_active)
VALUES ($1, $2, $3, $4, $5, $6, COALESCE($7, TRUE))
RETURNING id, first_name, last_name, email, password_hash, phone_no, dob, is_active, is_deleted, created_at, updated_at
`

type CreateUserParams struct {
	FirstName    string      `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	PhoneNo      pgtype.Text `json:"phone_no"`
	Dob          pgtype.Date `json:"dob"`
	Column7      interface{} `json:"column_7"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.PhoneNo,
		arg.Dob,
		arg.Column7,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.PhoneNo,
		&i.Dob,
		&i.IsActive,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users 
SET
  is_deleted = TRUE
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, password_hash, phone_no, dob, is_active, is_deleted, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.PhoneNo,
		&i.Dob,
		&i.IsActive,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, password_hash, phone_no, dob, is_active, is_deleted, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.PhoneNo,
		&i.Dob,
		&i.IsActive,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isEmailTakenByOtherUser = `-- name: IsEmailTakenByOtherUser :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE email = $1 AND id <> $2
)
`

type IsEmailTakenByOtherUserParams struct {
	Email string `json:"email"`
	ID    int32  `json:"id"`
}

func (q *Queries) IsEmailTakenByOtherUser(ctx context.Context, arg IsEmailTakenByOtherUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, isEmailTakenByOtherUser, arg.Email, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listUsersPaginated = `-- name: ListUsersPaginated :many
SELECT id, first_name, last_name, email, password_hash, phone_no, dob, is_active, is_deleted, created_at, updated_at FROM users
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type ListUsersPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsersPaginated(ctx context.Context, arg ListUsersPaginatedParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordHash,
			&i.PhoneNo,
			&i.Dob,
			&i.IsActive,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET
  email = COALESCE($1, email),
  first_name = COALESCE($2, first_name),
  last_name = COALESCE($3, last_name),
  phone_no = COALESCE($4, phone_no),
  dob = COALESCE($5, dob),
  is_active = COALESCE($6, is_active)
WHERE id = $7
RETURNING id, first_name, last_name, email, password_hash, phone_no, dob, is_active, is_deleted, created_at, updated_at
`

type UpdateUserParams struct {
	Email     pgtype.Text `json:"email"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	PhoneNo   pgtype.Text `json:"phone_no"`
	Dob       pgtype.Date `json:"dob"`
	IsActive  pgtype.Bool `json:"is_active"`
	ID        int32       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNo,
		arg.Dob,
		arg.IsActive,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.PhoneNo,
		&i.Dob,
		&i.IsActive,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
