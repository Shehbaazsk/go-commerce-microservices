// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_address.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO user_addresses (
    user_id, label, address1, address2, city, state, country, pin_code, is_default
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, user_id, label, address1, address2, city, state, country, pin_code, is_default, created_at, updated_at
`

type CreateUserAddressParams struct {
	UserID    int32       `json:"user_id"`
	Label     pgtype.Text `json:"label"`
	Address1  string      `json:"address1"`
	Address2  pgtype.Text `json:"address2"`
	City      pgtype.Text `json:"city"`
	State     pgtype.Text `json:"state"`
	Country   pgtype.Text `json:"country"`
	PinCode   pgtype.Text `json:"pin_code"`
	IsDefault pgtype.Bool `json:"is_default"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRow(ctx, createUserAddress,
		arg.UserID,
		arg.Label,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.Country,
		arg.PinCode,
		arg.IsDefault,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Label,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.Country,
		&i.PinCode,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserAddress = `-- name: DeleteUserAddress :exec
DELETE FROM user_addresses WHERE id = $1
`

func (q *Queries) DeleteUserAddress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserAddress, id)
	return err
}

const getUserAddressesByUserID = `-- name: GetUserAddressesByUserID :many
SELECT id, user_id, label, address1, address2, city, state, country, pin_code, is_default, created_at, updated_at FROM user_addresses
WHERE user_id = $1
`

func (q *Queries) GetUserAddressesByUserID(ctx context.Context, userID int32) ([]UserAddress, error) {
	rows, err := q.db.Query(ctx, getUserAddressesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAddress
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Label,
			&i.Address1,
			&i.Address2,
			&i.City,
			&i.State,
			&i.Country,
			&i.PinCode,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAddress = `-- name: UpdateUserAddress :one
UPDATE user_addresses
SET
    label = $2,
    address1 = $3,
    address2 = $4,
    city = $5,
    state = $6,
    country = $7,
    pin_code = $8,
    is_default = $9,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, label, address1, address2, city, state, country, pin_code, is_default, created_at, updated_at
`

type UpdateUserAddressParams struct {
	ID        int32       `json:"id"`
	Label     pgtype.Text `json:"label"`
	Address1  string      `json:"address1"`
	Address2  pgtype.Text `json:"address2"`
	City      pgtype.Text `json:"city"`
	State     pgtype.Text `json:"state"`
	Country   pgtype.Text `json:"country"`
	PinCode   pgtype.Text `json:"pin_code"`
	IsDefault pgtype.Bool `json:"is_default"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRow(ctx, updateUserAddress,
		arg.ID,
		arg.Label,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.Country,
		arg.PinCode,
		arg.IsDefault,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Label,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.Country,
		&i.PinCode,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
